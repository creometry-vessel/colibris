//GENERATED BY go-create
package services

import (
	d "github.com/creometry-incubator/colibris/database"
	m "github.com/creometry-incubator/colibris/models"
	"github.com/google/uuid"
)

type ratingsService struct{}

type RatingsServiceInterface interface {
	GetRatings() (*[]m.Rating, error)
	GetRating(id string) (*m.Rating, error)
	GetRatingByUserId(id string) (*m.Rating, error)
	CreateRating(Rating *m.Rating) error
	UpdateRating(Rating *m.Rating) error
	DeleteRating(id string) error
	AvgOverallRatingsByUserId(id string) (*float64, error)
}

func CreateRatingsService() RatingsServiceInterface {
	return &ratingsService{}
}
func (*ratingsService) GetRatings() (*[]m.Rating, error) {
	var Ratings []m.Rating
	if result := d.DB.Find(&Ratings); result.Error != nil {
		return nil, result.Error
	}
	return &Ratings, nil
}

func (*ratingsService) GetRating(id string) (*m.Rating, error) {
	var Rating m.Rating
	if result := d.DB.Where("uuid = ?", id).First(&Rating); result.Error != nil {
		return nil, result.Error
	}
	return &Rating, nil
}

func (*ratingsService) GetRatingByUserId(id string) (*m.Rating, error) {
	var Rating m.Rating
	if result := d.DB.Where("user_id = ?", id).First(&Rating); result.Error != nil {
		return nil, result.Error
	}
	return &Rating, nil
}

func (*ratingsService) CreateRating(Rating *m.Rating) error {
	Rating.UUID = uuid.New().String()
	Rating.Overall = (Rating.Quality + Rating.Quantity + Rating.Treatment) / 3
	if result := d.DB.Create(Rating); result.Error != nil {
		return result.Error
	}
	return nil
}

func (*ratingsService) UpdateRating(Rating *m.Rating) error {
	if result := d.DB.Save(Rating); result.Error != nil {
		return result.Error
	}
	return nil
}

func (*ratingsService) DeleteRating(id string) error {
	if result := d.DB.Delete(&m.Rating{UUID: id}); result.Error != nil {
		return result.Error
	}
	return nil
}

func (* ratingsService) AvgOverallRatingsByUserId(id string) (*float64, error) {
	var Ratings []m.Rating
	if result := d.DB.Where("user_id = ?", id).Find(&Ratings); result.Error != nil {
		return nil, result.Error
	}
	var overall float64
	for _, Rating := range Ratings {
		overall += float64(Rating.Overall)
	}
	avg:= overall / float64(len(Ratings))
	return &avg, nil
}
